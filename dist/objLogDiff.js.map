{"version":3,"sources":["utils.ts","validate.ts","validator/validateKeysEqual.ts","validator/validateStrictEqual.ts","validator/validateTypesMatch.ts","validator/validateValuesEqual.ts","objLogDiff.ts"],"names":[],"mappings":"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","file":"objLogDiff.js","sourceRoot":"../src","sourcesContent":["import { ObjEntries } from \"./types/ObjDiffTypes\";\n\nexport const entries = (x: object): ObjEntries => (Object as any).entries(x);\nexport const isObject = (o: any) => typeof o === \"object\";\nexport const printVal = (v: any) => [`${isObject(v) ? JSON.stringify(v) : v}`].map(s => s.length > 10 ? `${s.slice(0, 10)}...` : s)[0];\n","import { ObjDiffValidatorFn, ObjLogDiffArg } from \"./types/ObjDiffTypes\";\nimport { Validated } from \"./types/ValidatorTypes\";\n\nexport const mergeValidations = (vs: Validated[]): Validated => vs.reduce(([valid, msgs], [v, ms]) => [valid && v, msgs.concat(ms)], [true, []]);\n\ntype Validate = (fns: ObjDiffValidatorFn[]) => (x: ObjLogDiffArg, y: ObjLogDiffArg) => Validated;\nexport const validate: Validate = fns => (x, y) => mergeValidations(fns.map(fn => fn(x, y)));\n","import { ObjDiffValidatorFn, ObjLogDiffArg } from \"../types/ObjDiffTypes\";\nimport { Message, Validated } from \"../types/ValidatorTypes\";\n\nconst elsNotIn = <T> (x: T[]) => (y: T[]): T[] => x.filter((a) => y.indexOf(a) === -1);\nconst toKeyMessage = (pre: string) => (ks: string[]): Message[] => ks.length > 0 ? [`${pre} ${ks.join()}`] : [];\nconst keyMsg = (l1: string) => (l2: string) => `${l1} has key(s) that ${l2} does not: `;\nconst getKeysMessages = ([l1, v1]: ObjLogDiffArg) => ([l2, v2]: ObjLogDiffArg): Message[] => toKeyMessage(keyMsg(l1)(l2))\n                                                                                                         (elsNotIn(Object.keys(v1))(Object.keys(v2)))\n                                                                                            .concat(toKeyMessage(keyMsg(l2)(l1))\n                                                                                                   (elsNotIn(Object.keys(v2))(Object.keys(v1))));\n\nexport const validateKeysEqual: ObjDiffValidatorFn = (v1, v2) => [getKeysMessages(v1)(v2)].map((ms) => [ms.length === 0, ms] as Validated)[0];\n","import { ObjDiffValidatorFn, ObjLogDiffArg } from \"../types/ObjDiffTypes\";\nimport { printVal } from \"../utils\";\n\ntype StrictEqualMsg = (x: ObjLogDiffArg) => (y: ObjLogDiffArg) => string;\nconst strictEqualMsg: StrictEqualMsg = ([l1, v1]) => ([l2, v2]) => `${l1} (${printVal(v1)}) does not strictly equal ${l2} (${printVal(v2)})`;\n\nexport const validateStrictEqual: ObjDiffValidatorFn = ([l1 , v1], [l2 , v2]) => v1 === v2\n                                                                                    ? [true, []]\n                                                                                    : [false, [strictEqualMsg([l1, v1])([l2, v2])]];\n","import { ObjDiffValidatorFn, ObjLogDiffArg } from \"../types/ObjDiffTypes\";\nimport { printVal } from \"../utils\";\n\ntype TypesMatch = (x: any) => (y: any) => boolean;\nconst typesMatch: TypesMatch = x => y => typeof x === typeof y;\n\ntype TypeMsg = (x: ObjLogDiffArg) => string;\nconst typeMsg: TypeMsg = ([l, v]) => `${l} (${printVal(v)}) is ${typeof v}`;\n\ntype TypesMsg = (x: ObjLogDiffArg) => (y: ObjLogDiffArg) => string;\nconst typesMsg: TypesMsg = x => y => `Type of ${typeMsg(x)} while type of ${typeMsg(y)}`;\n\nexport const validateTypesMatch: ObjDiffValidatorFn = ([l1 , v1], [l2 , v2]) => typesMatch(v1)(v2)\n                                                                                    ? [true, []]\n                                                                                    : [false, [typesMsg([l1, v1])([l2, v2])]];\n","import { objLogDiff } from \"../objLogDiff\";\nimport { ObjDiffValidatorFn, ObjEntries, ObjLogDiffArg } from \"../types/ObjDiffTypes\";\nimport { Validated } from \"../types/ValidatorTypes\";\nimport { entries, isObject } from \"../utils\";\nimport { mergeValidations } from \"../validate\";\n\ntype EntriesDiff = (x: ObjEntries) => (y: {[key: string]: any}) => [string, any, any][];\nconst entriesDiff: EntriesDiff = x => y => x.filter(([k, v]) => !!y[k] && v !== y[k])\n                                            .map(([k, v]) => [k, v, y[k]] as [string, any, any]);\n\ntype ValMsg = (l1: string) => (l2: string) => (k: string) => (v1v: any) => (v2v: any) => string;\nconst valMsg: ValMsg = l1 => l2 => k => v1v => v2v => `${l1} has ${v1v} for key ${k} while ${l2} has ${v2v}`;\n\ntype ValsDiffBasic = (m: string) => Validated;\nconst valsDiffBasic: ValsDiffBasic = (m: string) => [false, [m]];\n\ntype ValidateValues = (x: ObjLogDiffArg, y: ObjLogDiffArg) => Validated[];\nconst validateValues: ValidateValues = ([l1, v1], [l2, v2]) => entriesDiff(entries(v1))(v2).map(([k, v1v, v2v]) =>\n                                                                    isObject(v1v) ? objLogDiff([`${l1}.${k}`, v1v])([`${l2}.${k}`, v2v])\n                                                                                  : valsDiffBasic(valMsg(l1)(l2)(k)(v1v)(v2v)));\n\nexport const validateValuesEqual: ObjDiffValidatorFn = (v1, v2) => mergeValidations(validateValues(v1, v2));\n","import { ObjDiffValidatorFn, ObjEntries, ObjLogDiffArg } from \"./types/ObjDiffTypes\";\nimport { Message, Validated } from \"./types/ValidatorTypes\";\nimport { isObject } from \"./utils\";\nimport { validate } from \"./validate\";\nimport { validateKeysEqual } from \"./validator/validateKeysEqual\";\nimport { validateStrictEqual } from \"./validator/validateStrictEqual\";\nimport { validateTypesMatch } from \"./validator/validateTypesMatch\";\nimport { validateValuesEqual } from \"./validator/validateValuesEqual\";\n\nexport const objLogDiff = ([l1, v1]: ObjLogDiffArg) => ([l2, v2]: ObjLogDiffArg): Validated => {\n    const validated = validate([\n        validateTypesMatch,\n    ].concat(isObject(v1) && isObject(v2) ? [\n        validateKeysEqual,\n        validateValuesEqual\n    ] : [validateStrictEqual]))([l1, v1], [l2, v2]);\n\n    return validated;\n};\n"]}